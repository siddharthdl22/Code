public static void MergeSort(int[] arr)
	{
		int start = 0;
		int end = arr.length - 1;
		MergeSortHelper(arr, start, end);
		for(int i = 0; i <= end; i++)
		{
			System.out.print(arr[i] + " ");
		}
	}
	
	public static void MergeSortHelper(int[] arr, int start, int end)
	{
		if(start < end)
		{
			int mid = (start + end) / 2;
			MergeSortHelper(arr, start, mid);
			MergeSortHelper(arr, mid + 1, end);
			Merge(arr, start, mid, end);
		}
	}
	
	public static void Merge(int[] arr, int start, int mid, int end)
	{
		int n1 = mid - start + 1;
		int n2 = end - mid;
		int[] L = new int[n1 + 1];
		int[] R = new int[n2 + 1];
		for(int i = 0; i < n1; i++)
		{
			L[i] = arr[start + i];
		}
		for(int i = 0; i < n2; i++)
		{
			R[i] = arr[(mid + 1) + i];
		}
		L[n1] = 999999999;
		R[n2] = 999999999;
		
		int i = 0;
		int j = 0;
		for(int k = start; k <= end; k++)
		{
			if(L[i] <= R[j])
			{	
				arr[k] = L[i];
				i++;
			}
			else
			{
				arr[k] = R[j];
				j++;
			}
		}
	}
