class MyHeap
{
	
	public void MaxHeapify(ArrayList<Integer> al, int startKey)
	{
		if(startKey <= al.size())
		{
			int left = Integer.MIN_VALUE;
			int right = Integer.MIN_VALUE;
			if(2 * startKey + 1 < al.size())
				left = al.get(2 * startKey + 1);
			if(2 * startKey + 2 < al.size())
				right = al.get(2 * startKey + 2);
			int largest = al.get(startKey);
			if(largest < left)
				largest = left;
			if(largest < right)
				largest = right;
		
			if(largest != al.get(startKey))
			{
				if(largest == left)
				{
					int temp = al.get(startKey);
					al.set(startKey, largest);
					al.set(2 * startKey + 1, temp);
					MaxHeapify(al, 2 * startKey + 1);
				}
				else if(largest == right)
				{
					int temp = al.get(startKey);
					al.set(startKey, largest);
					al.set(2 * startKey + 2, temp);
					MaxHeapify(al, 2 * startKey + 2);
				}
			}	
		}
	}
	
	public void BuildMaxHeap(ArrayList<Integer> al)
	{
		for(int i = (al.size() / 2); i >= 0; i--)
		{
			MaxHeapify(al, i);
		}
	}
			
	public void HeapSort(ArrayList<Integer> al)
	{
		BuildMaxHeap(al);
		for(int i = al.size() - 1; i > 0; i--)
		{
			int temp = al.get(0);
			al.set(0, al.get(al.size() - 1));
			al.set(al.size() - 1, temp);
			System.out.print(al.get(al.size() - 1) + " ");
			al.remove(al.size() - 1);
			MaxHeapify(al, 0);
		}
		System.out.print(al.get(0));
		al.remove(0);	
	}
	
	public int ExtractMaxHeap(ArrayList<Integer> al)
	{
		int maxValue = al.get(0);
		al.set(0, al.get(al.size() - 1));
		al.remove(al.size() - 1);
		MaxHeapify(al, 0);
		return maxValue; 
	}
	
	public void IncreaseKey(ArrayList<Integer> al, int oldKey, int newKey)
	{
		al.set(al.indexOf(oldKey), newKey);
		int parent = 0; 
		if(al.indexOf(newKey) % 2 == 0)
			parent = (al.indexOf(newKey) - 2) / 2;
		else
			parent = (al.indexOf(newKey) - 1) / 2;
		while(parent >= 0)
		{
			if(al.get(parent) < newKey)
			{
				int temp = al.get(parent);
				int index = al.indexOf(newKey);
				al.set(parent, newKey);
				al.set(index, temp);
				if(al.indexOf(newKey) % 2 == 0)
					parent = (al.indexOf(newKey) - 2) / 2;
				else
					parent = (al.indexOf(newKey) - 1) / 2;
			}
			else
			{
				break;
			}
		}
	}
	
	public void InsertMaxHeap(ArrayList<Integer> al, int element)
	{
		al.add(element);
		IncreaseKey(al, Integer.MIN_VALUE, element);
	}
}
