class MedianFinder {
    PriorityQueue<Integer> minHeap; 
    PriorityQueue<Integer> maxHeap;
    
    public MedianFinder()
    {
        minHeap = new PriorityQueue<Integer>();
        maxHeap = new PriorityQueue<>(10, Collections.reverseOrder());
    }
    // Adds a number into the data structure.
    public void addNum(int num) {
        maxHeap.offer(num);
        minHeap.offer(maxHeap.poll());
        if(maxHeap.size() < minHeap.size())
            maxHeap.offer(minHeap.poll());
    }

    // Returns the median of current data stream
    public double findMedian() {
        if(minHeap.size() == maxHeap.size())
            return ((minHeap.peek() + maxHeap.peek()) / 2.0);
        else
            return maxHeap.peek();
    }
}
