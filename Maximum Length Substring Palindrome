// input string : forgeeksskeegfor
// output : geeksskeeg , 10

public void LongestSubStringPalindrome(String input)
	{
		char[] inputChar = input.toCharArray();
		int n = inputChar.length;
		boolean[][] t = new boolean[n][n];
		int startIndex = -1;
		int maxLength = -1;
		
		//All the substring of length 1 is a palindrome
		for(int i = 0; i < n; i++)
		{
			t[i][i] = true;
		}
		
		//Check for all the substrings of length 2
		for(int i = 0; i < n - 1; i++)
		{
			if(inputChar[i] == inputChar[i + 1])
			{
				t[i][i + 1] = true;
				startIndex = i;
				maxLength = 2;
			}
		}
		
		//Check for all the substrings of length greater than 2
		for(int k = 3; k <= n; k++)
		{
			for(int i = 0; i < (n - k + 1); i++)
			{
				int j = i + k - 1;
				if(t[i + 1][j - 1] && inputChar[i] == inputChar[j])
				{
					t[i][j] = true;
					if(k > maxLength)
					{
						startIndex = i;
						maxLength = k;
					}
				}
			}
		}
		
		//Printing the result
		for(int i = startIndex; i < startIndex + maxLength; i++)
		{
			System.out.print(inputChar[i]);
		}
		System.out.println();
		System.out.println(maxLength);
	}
