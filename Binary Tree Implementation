//This file includes the following
// 1. PreOrder Traversal
// 2. InOrder Traversal
// 3. PostOrder Traversal
// 4. Insert Element to the Binary Tree
// 5. Search element in the Binary Tree
// 6. Delete element from the Binary Tree
// 7. Finding a unique path between two nodes in the Binary Tree (Lowest Common Ancestor)

class Node
{
	int data;
	Node Parent;
	Node LeftChild;
	Node RightChild;
	
	public Node(int d)
	{
		data = d;
	}
}
class MyBinaryTree
{
	Node root;
	public void PreOrderTraversal(Node root)
	{
		if(root != null)
		{
			System.out.print(root.data + " ");
			PreOrderTraversal(root.LeftChild);
			PreOrderTraversal(root.RightChild);
		}
	}

	public void InOrderTraversal(Node root)
	{
		if(root != null)
		{
			InOrderTraversal(root.LeftChild);
			System.out.print(root.data + " ");
			InOrderTraversal(root.RightChild);
		}
	}

	public void PostOrderTraversal(Node root)
	{
		if(root != null)
		{
			PostOrderTraversal(root.LeftChild);
			PostOrderTraversal(root.RightChild);
			System.out.print(root.data + " ");
		}
	}

	public void SearchElement(Node root, int k)
	{
		if(root != null)
		{
			if(root.data == k)
			{
				System.out.println(root.data);
			}
			else if(root.data < k)
			{
				Node right = root.RightChild;
				if(right != null)
				{
					SearchElement(right, k);
				}
				else
					System.out.println("-1");
			}
			else if(root.data > k)
			{	
				Node left = root.LeftChild;
				if(left != null)
				{
					SearchElement(left, k);
				}
				else
				{
					System.out.println("-1");
				}
			}
		}
		else
			System.out.println("-1");
	}

	public void InsertElement(Node root, int k)
	{
		Node current = new Node(k);
		if(root != null)
		{
			if(root.data == k)
			{
				System.out.println("Node already present in the Tree");
			}
			else if(root.data > k)
			{
				Node left = root.LeftChild;
				if(left != null)
					InsertElement(left, k);
				else
				{
					root.LeftChild = current;
					current.Parent = root;
				}
			}
			else if(root.data < k)
			{
				Node right = root.RightChild;
				if(right != null)
					InsertElement(right, k);
				else
				{
					root.RightChild = current;
					current.Parent = root;
				}
			}			
		}
		else
		{
			root = current;
		}
	}

	public void DeleteElement(Node root, int k)
	{
		if(root != null)
		{
			if(root.data == k)
			{
				Node left = root.LeftChild;
				Node right = root.RightChild;
				if(left == null && right == null)
				{
					if(root.Parent.data > k)
					{
						root.Parent.LeftChild = null;
					}
					else
					{
						root.Parent.RightChild = null;
					}
				}
				else if(left == null && right != null)
				{
					if(root.Parent.data > k)
					{
						root.Parent.LeftChild = right;
					}
					else
					{
						root.Parent.RightChild = right;
					}
					right.Parent = root.Parent;
				}
				else if(left != null && right == null)
				{
					if(root.Parent.data > k)
					{
						root.Parent.LeftChild = left;
					}
					else
					{
						root.Parent.RightChild = left;
					}
					left.Parent = root.Parent;
				}
				else if(left != null && right != null)
				{
					Node temp = right.LeftChild;
					if(temp != null)
					{
						Node tempParent = right;
						while(temp != null)
						{
							tempParent = temp;
							temp = temp.LeftChild;
						}
						root.data = tempParent.data;
						tempParent.Parent.LeftChild = null;
					}
					else
					{
						if(root.Parent.data > k)
						{
							root.Parent.LeftChild = right;
							right.Parent = root.Parent;
						}
						else
						{
							root.Parent.RightChild = right;
							right.Parent = root.Parent;	
						}
						right.LeftChild = left;
						left.Parent = right;
					}
				}
			}
			else if(root.data > k)
			{
				Node left = root.LeftChild;
				if(left != null)
					DeleteElement(left, k);
				else
					System.out.println("-1");
			}
			else if(root.data < k)
			{
				Node right = root.RightChild;
				if(right != null)
					DeleteElement(right, k);
				else
					System.out.println("-1");
			}
		}
		else
		{
			System.out.println("The Tree is empty");
		}
	}
	
	public void PathFinder(Node node1, Node node2)
	{
		boolean pathExists = false;
		HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
		Node tempParent1 = node1.Parent;
		if(tempParent1 != null)
		{
			while(tempParent1 != null)
			{
				hm.put(tempParent1.data, 1);
				tempParent1 = tempParent1.Parent;
			}
		}

		Node tempParent2 = node2.Parent;
		if(tempParent2 != null)
		{
			while(tempParent2 != null)
			{
				if(hm.get(tempParent2.data) != null)
				{
					pathExists = true;
					break;
				}
				tempParent2 = tempParent2.Parent;
			}
		}
		if(pathExists)
		{	
			Node commonParent = tempParent2; 
			if(node1.data > node2.data)
			{
				Node pointerNode = node2;
				while(pointerNode.data != commonParent.data)
				{
					System.out.print(pointerNode.data + " ");
					pointerNode = pointerNode.Parent;
				}
				System.out.print(commonParent.data + " ");
				pointerNode = pointerNode.LeftChild;
				while(pointerNode.data != node1.data)
				{
					System.out.print(pointerNode.data + " ");
					if(pointerNode.data < node1.data)
					{
						pointerNode = pointerNode.RightChild;
					}
					else
					{
						pointerNode = pointerNode.LeftChild;
					}
				}
				System.out.print(node1.data + " ");
			}
			else
			{
				Node pointerNode = node1;
				while(pointerNode.data != commonParent.data)
				{
					System.out.print(pointerNode .data + " ");
					pointerNode = pointerNode.Parent;
				}
				System.out.print(commonParent.data + " ");
				pointerNode = pointerNode.RightChild;
				while(pointerNode.data != node2.data)
				{
					System.out.print(pointerNode.data + " ");
					if(pointerNode.data < node2.data)
					{
						pointerNode = pointerNode.RightChild;
					}
					else
					{
						pointerNode = pointerNode.LeftChild;
					}
				}
				System.out.println(node2.data + " ");	
			}
		}
		else
		{
			System.out.println("No Path Exists");
		}
	}
}
