class Node
{
	int val;
	Node left;
	Node right;
	
	public Node(int v)
	{
		val = v;
	}
}

class Tree
{
	Node head;
	
	public boolean IsUniValueTree(Node head, int k)
	{
		if(head != null)
		{
			if(head.val != k)
				return false;
			else if(head.left != null && head.right != null)
				return IsUniValueTree(head.left, k) && IsUniValueTree(head.right, k);
			else
				return true;
		}
		return false;
	}
	
	public int CountUniValueTree(Node head, int count)
	{
		if(head != null)
		{
			Node left = head.left;
			Node right = head.right;
			if(left != null && right != null)
			{
				int leftCount = CountUniValueTree(head.left, count);
				int rightCount = CountUniValueTree(head.right, count);
				if(leftCount > count && rightCount > count && head.val == left.val && head.val == right.val && IsUniValueTree(head.left, head.left.val) && IsUniValueTree(head.right, head.right.val))
					count = leftCount + rightCount + 1;
				else
					count = leftCount + rightCount;
				return count;
			}
			else
				return 1;
		}
		return 0;
	}
}
